---

- name: Check if gopass is installed
  ansible.builtin.stat:
    path: "{{ bin_gopass_bin_path }}"
  register: bin_gopass_binary

- name: Check which version of gopass is installed
  ansible.builtin.shell: |
    {{ bin_gopass_bin_path }} version
  register: bin_gopass_version_check
  check_mode: false
  when: >
    bin_gopass_binary.stat.exists
    and bin_gopass_binary.stat.executable
  changed_when: false

- name: Include installation of gopass
  ansible.builtin.include_tasks: gopass_install.yml
  vars:
    bin_gopass_version_string: "gopass {{ bin_gopass_version }}"
  when: >
    not (bin_gopass_binary.stat.exists and bin_gopass_binary.stat.executable)
    or bin_gopass_version_check.stdout is not defined
    or bin_gopass_version_string not in bin_gopass_version_check.stdout
    or bin_gopass_force_install | bool

- name: Ansible check gopass configuration exists.
  ansible.builtin.stat:
    path: "{{ bin_gopass_config_file }}"
  register: gopass_configuration

- name: Check gopass configuration
  ansible.builtin.lineinfile:
    dest: "{{ bin_gopass_config_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: "^\\tautoclip\\s*=\\s*(false|true)\\s*$"
      # noqa: no-tabs
      line: "\tautoclip = false"
    - regexp: "^\\tautoimport\\s*=\\s*(false|true)\\s*$"
      # noqa: no-tabs
      line: "\tautoimport = true"
    - regexp: "^\\tcliptimeout\\s*=\\s*[0-9]+\\s*$"
      # noqa: no-tabs
      line: "\tcliptimeout = 60"
    - regexp: "^\\texportkeys\\s*=\\s*(false|true)\\s*$"
      # noqa: no-tabs
      line: "\texportkeys = true"
    - regexp: "^\\tnopager\\s*=\\s*(false|true)\\s*$"
      # noqa: no-tabs
      line: "\tnopager = true"
    - regexp: "^\\tnotifications\\s*=\\s*(false|true)\\s*$"
      # noqa: no-tabs
      line: "\tnotifications = false"
    - regexp: "^\\tparsing\\s*=\\s*(false|true)\\s*$"
      # noqa: no-tabs
      line: "\tparsing = false"
    - regexp: "^\\tshowsafecontent\\s*=\\s*(false|true)\\s*$"
      # noqa: no-tabs
      line: "\tshowsafecontent = false"
  when: gopass_configuration.stat.exists

...
